---
import MainLayout from "@/layouts/MainLayout.astro";
import ProductSlideshow from "@/components/products/ProductSlideshow.astro";
import { actions } from "astro:actions";
import "@/styles/global.css";

const { slug } = Astro.params;

const { data, error } = await Astro.callAction(
  actions.getProductBySlug,
  slug ?? ""
);

if (error) {
  return Astro.redirect("/404");
}

const { product, images } = data;
---

<MainLayout title={product.title} description={product.description}>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-8 p-6 bg-gray-50 rounded-lg shadow-lg">
    <div class="bg-white rounded-lg shadow-md p-4">
      <ProductSlideshow images={images.map( i => i.image )} />
    </div>

    <section class="flex flex-col justify-between">
      <div>
        <h2 class="text-3xl font-bold text-gray-800">{product.title}</h2>
        <h3 class="text-xl font-semibold text-blue-600 mt-2">${product.price}</h3>

        <h3 class="mt-6 text-lg font-semibold text-gray-700">Tallas</h3>
        <ul class="flex gap-3 mt-2">
          {
            product.sizes
              .split(",")
              .map((size) => (
                <li
                  data-size={size}
                  class="px-4 py-2 border border-gray-300 rounded-lg cursor-pointer hover:bg-blue-100 transition-all"
                >
                  {size}
                </li>
              ))
          }
        </ul>

        <h3 class="mt-6 text-lg font-semibold text-gray-700">Cantidad</h3>
        <div class="flex items-center gap-4 mt-2">
          <button class="btn-quantity">-</button>
          <input type="number" min="1" value="1" class="quantity-input" />
          <button class="btn-quantity">+</button>
        </div>

        <button
          class="cursor-pointer mt-6 w-full bg-blue-500 text-white py-3 rounded-lg font-bold hover:bg-blue-600 transition-all disabled:bg-gray-400"
        >
          Añadir al carrito
        </button>
      </div>

      <div class="mt-10">
        <h3 class="text-lg font-semibold text-gray-700">Descripción</h3>
        <p class="text-gray-600 mt-2">{product.description}</p>
      </div>
    </section>
  </div>

  <input type="hidden" id="product-id" value={product.id} />
</MainLayout>

<script>
  import { itemsInCart } from "@/store";
  import { CartCookiesClient } from "@/utils/cart-cookies";
  import { navigate } from "astro:transitions/client";
  import Swal from "sweetalert2";

  document.addEventListener("astro:page-load", () => {
    const sizeElements = document.querySelectorAll("li");

    sizeElements.forEach((liElement) => {
      liElement.addEventListener("click", () => {
        sizeElements.forEach((s) => s.classList.remove("selected-size"));
        liElement.classList.add("selected-size");
      });
    });

    const quantityInput = document.querySelector("input.quantity-input") as HTMLInputElement;
    const productIdInput = document.querySelector("#product-id") as HTMLInputElement;

    let quantity = 1;

    const decrementButton = document.querySelector("button.btn-quantity:first-of-type");
    const incrementButton = document.querySelector("button.btn-quantity:last-of-type");
    const addToCartButton = document.querySelector("button.cursor-pointer");

    if (!incrementButton || !quantityInput || !decrementButton || !addToCartButton) return;

    // Incrementar cantidad
    incrementButton.addEventListener("click", () => {
      quantity = Math.min(quantity + 1, 5);
      quantityInput.value = quantity.toString();
    });

    // Decrementar cantidad
    decrementButton.addEventListener("click", () => {
      quantity = Math.max(quantity - 1, 1);
      quantityInput.value = quantity.toString();
    });

    // Añadir al carrito
    addToCartButton.addEventListener("click", async () => {
      const size = document.querySelector(".selected-size")?.textContent;
      if (!size) {
        Swal.fire({
          icon: "error",
          title: "Selecciona una talla!",
        });
        return;
      }

      const cart = CartCookiesClient.addItem({
        productId: productIdInput.value,
        size: size,
        quantity: quantity,
      });

      itemsInCart.set(cart.length);

      await navigate('/cart');
    });
  });
</script>

<style>
  @import "tailwindcss";

  h3 {
    @apply font-bold;
  }

  li {
    @apply hover:bg-blue-100 cursor-pointer px-4 py-2 border border-gray-300 rounded-lg transition-all;
  }

  .selected-size {
    @apply bg-blue-500 text-white font-bold;
  }

  .btn-quantity {
    @apply w-10 h-10 text-center p-2 border border-gray-300 rounded-lg hover:bg-gray-100 cursor-pointer transition-all;
  }

  .quantity-input {
    @apply w-16 text-center p-2 border border-gray-300 rounded-lg;
  }

  input[type="number"]::-webkit-outer-spin-button,
  input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input[type="number"] {
    -moz-appearance: textfield; /* Para Firefox */
  }
</style>